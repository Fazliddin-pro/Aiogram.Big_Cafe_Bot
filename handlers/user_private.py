import os
from aiogram import F, types, Router
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import (
    orm_add_to_cart,
    orm_add_user,
    orm_update_user_phone,
    orm_get_user_by_id,
    orm_get_user_carts  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
)

from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content
from kbds.inline import MenuCallBack, get_callback_btns
from kbds.reply import create_contact_button

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")
    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)


async def add_to_cart(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    user_id = callback.from_user.id

    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    if callback_data.menu_name == "order":
        user = await orm_get_user_by_id(session, user_id)

        if user is None:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if not user.phone:  # –£–ø—Ä–æ—â–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
            contact_keyboard = create_contact_button()
            await callback.message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {callback.from_user.full_name} üåü")
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard)
        else:
            await callback.message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {callback.from_user.full_name} üåü")
            await callback.message.answer(f"–ú—ã —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å ü•≥")
            # –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
            await send_invoice(callback.message, user_id, session)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ callback.message

        await callback.answer()
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=user_id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()


@user_private_router.message(F.contact)
async def handle_contact(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    phone = message.contact.phone_number

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await orm_update_user_phone(session, user_id, phone)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä! üåü", reply_markup=types.ReplyKeyboardRemove())

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å
    await send_invoice(message, user_id, session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é


async def send_invoice(message: types.Message, user_id: int, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = await orm_get_user_carts(session, user_id)

    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    # –ó–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–æ–π—Å–∞
    title = "Fast-Food"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    description_lines = [f"{item.product.name} - {item.quantity} —à—Ç." for item in cart_items]
    description = "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n" + "\n".join(description_lines)
    
    payload = f"order_{user_id}"  # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
    provider_token = os.getenv("PAYMENT")
    currency = "UZS"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–∞–∫ —É–∑–±–µ–∫—Å–∫–∏–π —Å—É–º
    start_parameter = "test"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—ã –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    prices = []
    total_amount = 0

    for item in cart_items:
        price = types.LabeledPrice(label=item.product.name, amount=item.product.price * item.quantity * 100)  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        prices.append(price)
        total_amount += item.product.price * item.quantity

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total_price_label = types.LabeledPrice(label="–ò—Ç–æ–≥–æ", amount=total_amount * 100)
    prices.append(total_price_label)

    await message.answer_invoice(
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        currency=currency,
        prices=prices,
        start_parameter=start_parameter,
        photo_url="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.lTjJIvFKdi5sEVjtgHFM7QHaEc%26pid%3DApi&f=1&ipt=3b47e2335d7e65b45ea84635e4c065c5a999fb3b387af4fcf26411f1c055ecb6&ipo=images",  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        photo_width=450,  # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo_height=300,  # –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        need_name=True,
        need_phone_number=True,
        need_email=True,
        need_shipping_address=False,
        is_flexible=False
    )
